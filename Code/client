#----CLIENT SIDE TRANSFER VARIBLE DATA OF KEY
import socket
import hashlib
from contextlib import closing
from datetime import datetime
from Blocks import Block, Blockchain
from encrypt_decrypt import generate_key, connection, encrypt, decrypt_message

# Initialize blockchain
blockchain = Blockchain()

def connect_to_server(host, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
        try:
            client_socket.connect((host, port))
            print(f"Connected to server {host}:{port}")

            while True:
                # Prompt user for input
                message = input("Enter your message: ")
                if message.lower() == 'exit':
                    break
                encrypted_message = encrypt(connection(key), message)
                # Add user message to blockchain
                blockchain.add_block(message)
                # Send encrypted message to server
                client_socket.sendall(encrypted_message)
                # Receive encrypted response from server
                encrypted_response = client_socket.recv(1024)
                # Decrypt the server response
                decrypted_response = decrypt_message(connection(key), encrypted_response).decode('ascii')
                # Add server response to blockchain
                blockchain.add_block(decrypted_response)
                print(f"Server says: {decrypted_response}")
        except Exception as e:
            print(f"An error occurred: {e}")
        finally:
            client_socket.close()

if __name__ == "__main__":
    host = socket.gethostname()  # Replace if different ips
    port = 9999
    connect_to_server(host, port)
