import socket
import hashlib
from contextlib import closing
from datetime import datetime
from Blocks import Block, Blockchain
from encrypt_decrypt import generate_key, connection, encrypt, decrypt_message
from cryptography.fernet import Fernet

# Initialize blockchain
blockchain = Blockchain()
def start_server(host, port, max_connections=2):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((host, port))
        server_socket.listen(max_connections)
        print(f"Server started on {host}:{port}. Waiting for connections...")

        while True:
            print("Please enter the IP address of the client to connect to:")
            client_ip = input()  # User inputs the client IP address
            client_port = port  # Assuming the client is listening on the same port
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as outbound_socket:
                    outbound_socket.connect((client_ip, client_port))
                    print(f"Connected to client at {client_ip}:{client_port}")
                    key = generate_key()
                    fernet = Fernet(key)

                    # Send the key to the client securely
                    outbound_socket.sendall(key)

                    # Send a message to the client asking if they want to connect
                    outbound_socket.sendall(b"Do you want to connect to the server? (yes/no)")
                    response = outbound_socket.recv(1024).decode('utf-8')
                    if response.lower() == 'yes':
                        print("Client has agreed to connect.")
                        # Proceed with the client-server exchange
                        while True:


                        # Receive message from client
                        # Receive message from client
                            encrypted_data = outbound_socket.recv(1024)
                            if not encrypted_data:
                                print("Client has disconnected.")
                                break
                            #decypt the recived data from client
                            decrypted_data = decrypt_message(connection(key), encrypted_data)
                            print(f"Client says: {decrypted_data}")
                        # Add decrypted_data to blockchain
                            blockchain.add_block(decrypted_data)
                        # Send response to client
                            server_response = input("Enter your response: ")
                            encrypted_response = encrypt(connection(key), server_response)
                        # Add server response to blockchain

                            blockchain.add_block(server_response)
                            outbound_socket.sendall(encrypted_response)
                    else:
                        print("Client has declined the connection.")
            except Exception as e:
                print(f"An error occurred: {e}")

if __name__ == "__main__":
    host = '0.0.0.0'
    port = 9999
    start_server(host, port)
